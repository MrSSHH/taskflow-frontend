diff --git a/src/components/tasks/TaskCard.css b/src/components/tasks/TaskCard.css
new file mode 100644
index 0000000..4f197a9
--- /dev/null
+++ b/src/components/tasks/TaskCard.css
@@ -0,0 +1,21 @@
+@keyframes shake {
+  0% {
+    transform: rotate(-2deg);
+  }
+  25% {
+    transform: rotate(2deg);
+  }
+  50% {
+    transform: rotate(-2deg);
+  }
+  75% {
+    transform: rotate(2deg);
+  }
+  100% {
+    transform: rotate(-2deg);
+  }
+}
+
+.task-card.shaking {
+  animation: shake 0.4s infinite;
+}
diff --git a/src/components/tasks/TaskCard.tsx b/src/components/tasks/TaskCard.tsx
index 83571cb..aba2984 100644
--- a/src/components/tasks/TaskCard.tsx
+++ b/src/components/tasks/TaskCard.tsx
@@ -19,6 +19,7 @@ type Props = {
   setSelectedTaskIds: React.Dispatch<React.SetStateAction<number[]>>;
   selectedTaskIds: number[];
 };
+const TIMEOUT_ANIMATION = 400; // 400 ms
 
 const TaskCard: React.FC<Props> = ({
   task,
@@ -30,21 +31,23 @@ const TaskCard: React.FC<Props> = ({
   const timeoutRef = useRef<NodeJS.Timeout | null>(null);
 
   const handleTouchPress = (task: Task) => {
-    console.log(selectedTaskIds);
     if (selectedTaskIds.length > 0) {
+      // 👉 Already in selection mode — toggle immediately
       setSelectedTaskIds((prev) =>
         prev.includes(task.id)
           ? prev.filter((currentId) => currentId !== task.id)
           : [...prev, task.id]
       );
+    } else {
+      // 👉 Not in selection mode — wait for long-press
+      timeoutRef.current = setTimeout(() => {
+        setSelectedTaskIds((prev) =>
+          prev.includes(task.id)
+            ? prev.filter((currentId) => currentId !== task.id)
+            : [...prev, task.id]
+        );
+      }, TIMEOUT_ANIMATION);
     }
-    timeoutRef.current = setTimeout(() => {
-      setSelectedTaskIds((prev) =>
-        prev.includes(task.id)
-          ? prev.filter((currentId) => currentId !== task.id)
-          : [...prev, task.id]
-      );
-    }, 600);
   };
   const handleTouchEnd = () => {
     if (timeoutRef.current) {
@@ -52,15 +55,28 @@ const TaskCard: React.FC<Props> = ({
       timeoutRef.current = null;
     }
   };
-  const isSelected = selectedTaskIds.includes(task.id);
 
+  const handleTouchMove = () => {
+    if (timeoutRef.current) {
+      clearTimeout(timeoutRef.current);
+      timeoutRef.current = null;
+    }
+  };
+  const handleTouchCancel = handleTouchEnd;
+
+  const isSelected = selectedTaskIds.includes(task.id);
   return (
     <>
       <IonCard
         key={task.id}
-        onTouchStart={(event) => handleTouchPress(task)}
+        onTouchStart={
+          selectedTaskIds.length === 0
+            ? (event) => handleTouchPress(task)
+            : undefined
+        }
         onTouchEnd={handleTouchEnd}
-        onTouchCancel={handleTouchEnd}
+        onTouchCancel={handleTouchCancel}
+        onTouchMove={handleTouchMove}
         style={{
           transform: isSelected ? "scale(0.95)" : "scale(1)",
           transition: "all 0.3s ease-in-out",
@@ -69,22 +85,24 @@ const TaskCard: React.FC<Props> = ({
         }}
       >
         <IonCardHeader>
-          <IonCardSubtitle>
-            Closest due date: {task.dueDates[0].dueDates ?? "-"}
-          </IonCardSubtitle>
-
-          <IonCardTitle>
-            {isSelected && (
+          <div
+            style={{
+              display: "flex",
+              justifyContent: "space-between",
+              alignItems: "center",
+            }}
+          >
+            <IonCardTitle>{task.title}</IonCardTitle>
+            {selectedTaskIds.length > 0 && (
               <IonCheckbox
-                onClick={(e) => e.preventDefault()}
-                style={{ pointerEvents: "none", opacity: 1}}
-                checked={true}
-                justify="end"
+                checked={isSelected}
+                onIonChange={() => handleTouchPress(task)}
               />
             )}
-
-            {task.title}
-          </IonCardTitle>
+          </div>
+          <IonCardSubtitle>
+            Closest due date: {task.dueDates[0].dueDates ?? "-"}
+          </IonCardSubtitle>
         </IonCardHeader>
         <IonCardContent>{task.body}</IonCardContent>
 
@@ -101,6 +119,7 @@ const TaskCard: React.FC<Props> = ({
             onClick={() => {
               toEdit(task);
             }}
+            disabled={selectedTaskIds.length > 0 ? true : false}
           >
             Edit
           </IonButton>
@@ -110,6 +129,7 @@ const TaskCard: React.FC<Props> = ({
             fill="clear"
             color="success"
             slot="end"
+            disabled={selectedTaskIds.length > 0 ? true : false}
             onClick={() => {
               toDelete(task);
             }}
diff --git a/src/pages/Tasks.tsx b/src/pages/Tasks.tsx
index 4633619..6c62408 100644
--- a/src/pages/Tasks.tsx
+++ b/src/pages/Tasks.tsx
@@ -19,7 +19,7 @@ import {
 } from "@ionic/react";
 import React, { useRef, useState } from "react";
 import { getTasks, deleteTask, editTask } from "../services/api";
-import { addOutline, logInOutline } from "ionicons/icons";
+import { addOutline, logInOutline, trashBinOutline } from "ionicons/icons";
 
 import { Task } from "../types/task";
 import TaskCard from "../components/tasks/TaskCard";
@@ -28,6 +28,8 @@ import TaskEditModal from "../components/tasks/TaskEditModal";
 import TaskDeleteConfirmation from "../components/tasks/TaskDeleteConfirmation";
 import TaskAddNew from "../components/tasks/TaskAddNew";
 
+const TIMEOUT_ANIMATION = 400; // 400 ms
+
 const Tasks: React.FC = () => {
   const [loading, setLoading] = useState<boolean>(true);
   const [tasks, setTasks] = useState<Task[]>([]);
@@ -50,7 +52,7 @@ const Tasks: React.FC = () => {
           "⏳ [Tasks.tsx:48] Simulating 1s delay before fetching tasks..."
         );
         resolve(null); // or just resolve();
-      }, 500)
+      }, TIMEOUT_ANIMATION)
     );
     const res = await getTasks();
     console.log("* ~ Tasks.tsx ~ getTasks ~ tasks:", res.data);
@@ -81,11 +83,51 @@ const Tasks: React.FC = () => {
   return (
     <IonPage>
       <IonHeader>
-        <IonToolbar color={"secondary"}>
+        <IonToolbar color="secondary">
           <IonButtons slot="start">
-            <IonMenuButton />
+            {selectedTaskIds.length > 0 ? (
+              <>
+                <IonButton
+                  color="danger"
+                  fill="solid"
+                  size="default"
+                  onClick={async () => {
+                    deleteTask(selectedTaskIds);
+
+                    try {
+                      setLoading(true);
+                      await fetchTasks();
+                    } catch (err) {
+                      console.error("Failed to fetch tasks:", err);
+                    } finally {
+                      setLoading(false);
+                    }
+                    setSelectedTaskIds([]);
+                  }}
+                >
+                  <IonIcon slot="start" icon={trashBinOutline} />
+                  Delete ({selectedTaskIds.length})
+                </IonButton>
+              </>
+            ) : (
+              <IonMenuButton />
+            )}
           </IonButtons>
+
           <IonTitle>Tasks</IonTitle>
+
+          <IonButtons slot="end">
+            {selectedTaskIds.length > 0 && (
+              <IonButton
+                color="light"
+                fill="solid"
+                size="default"
+                onClick={() => setSelectedTaskIds([])}
+              >
+                Cancel
+              </IonButton>
+            )}
+          </IonButtons>
         </IonToolbar>
         <IonToolbar color={"secondary"}>
           <IonSearchbar />
@@ -107,6 +149,7 @@ const Tasks: React.FC = () => {
         ) : (
           tasks.map((task) => (
             <TaskCard
+              key={task.id}
               task={task}
               toDelete={() => {
                 setTaskToDelete(task);
@@ -116,7 +159,6 @@ const Tasks: React.FC = () => {
                 setTaskToEdit(task);
                 setShowEditModal(true);
               }}
-              
               selectedTaskIds={selectedTaskIds}
               setSelectedTaskIds={setSelectedTaskIds}
             ></TaskCard>
diff --git a/src/services/api.ts b/src/services/api.ts
index 36481c7..c364c72 100644
--- a/src/services/api.ts
+++ b/src/services/api.ts
@@ -9,14 +9,23 @@ const api = axios.create({
   },
 });
 
+export function deleteTask(taskIdOrIds: number): Promise<any>;
+export function deleteTask(taskIdOrIds: number[]): Promise<any[]>;
+
+export function deleteTask(taskIdOrIds: number | number[]) {
+  if (Array.isArray(taskIdOrIds)) {
+    return Promise.all(
+      taskIdOrIds.map((taskId) => api.delete(`/tasks/${taskId}`))
+    );
+  }
+
+  return api.delete(`/tasks/${taskIdOrIds}`);
+}
+
 export const getTasks = async () => {
   return await api.get<Task[]>("/tasks");
 };
 
-export const deleteTask = (taskId: number) => {
-  return api.delete(`/tasks/${taskId}`);
-};
-
 export const editTask = async (task: Task) => {
   const taskJson = JSON.stringify(task, ["title", "body", "dueDates"], 2);
   console.log(taskJson);
